version: '3.8'

services:
  # === ENTORNO QA ===
  
  # Base de datos para QA
  db-qa:
    image: mysql:8.0
    container_name: mysql-qa
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-admin123}
      MYSQL_DATABASE: ${DB_NAME_QA:-courses_qa}
      MYSQL_USER: ${DB_USER:-appuser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-apppass123}
    volumes:
      - mysql-qa-data:/var/lib/mysql
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "3307:3306"  # Puerto externo para QA
    networks:
      - qa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend QA
  backend-qa:
    image: ${DOCKER_USERNAME:-felipeganame}/tp2-backend:${IMAGE_TAG:-dev}
    container_name: backend-qa
    depends_on:
      db-qa:
        condition: service_healthy
    env_file:
      - .env.qa
    environment:
      - DB_HOST=db-qa
      - DB_PORT=3306
      - ENVIRONMENT=QA
    ports:
      - "8081:8080"  # Puerto externo para QA
    networks:
      - qa-network
    restart: unless-stopped
    volumes:
      - backend-qa-uploads:/root/uploads

  # Frontend QA
  frontend-qa:
    image: ${DOCKER_USERNAME:-felipeganame}/tp2-frontend:${IMAGE_TAG:-dev}
    container_name: frontend-qa
    depends_on:
      - backend-qa
    environment:
      - REACT_APP_API=http://localhost:8081
      - REACT_APP_ENV=QA
    ports:
      - "3001:80"  # Puerto externo para QA
    networks:
      - qa-network
    restart: unless-stopped

  # === ENTORNO PROD ===
  
  # Base de datos para PROD
  db-prod:
    image: mysql:8.0
    container_name: mysql-prod
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-admin123}
      MYSQL_DATABASE: ${DB_NAME_PROD:-courses_prod}
      MYSQL_USER: ${DB_USER:-appuser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-apppass123}
    volumes:
      - mysql-prod-data:/var/lib/mysql
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "3308:3306"  # Puerto externo para PROD
    networks:
      - prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend PROD
  backend-prod:
    image: ${DOCKER_USERNAME:-felipeganame}/tp2-backend:${IMAGE_TAG:-v1.0}
    container_name: backend-prod
    depends_on:
      db-prod:
        condition: service_healthy
    env_file:
      - .env.prod
    environment:
      - DB_HOST=db-prod
      - DB_PORT=3306
      - ENVIRONMENT=PRODUCTION
    ports:
      - "8082:8080"  # Puerto externo para PROD
    networks:
      - prod-network
    restart: unless-stopped
    volumes:
      - backend-prod-uploads:/root/uploads

  # Frontend PROD
  frontend-prod:
    image: ${DOCKER_USERNAME:-felipeganame}/tp2-frontend:${IMAGE_TAG:-v1.0}
    container_name: frontend-prod
    depends_on:
      - backend-prod
    environment:
      - REACT_APP_API=http://localhost:8082
      - REACT_APP_ENV=PRODUCTION
    ports:
      - "3002:80"  # Puerto externo para PROD
    networks:
      - prod-network
    restart: unless-stopped

networks:
  qa-network:
    driver: bridge
    name: courses-qa-network
  prod-network:
    driver: bridge
    name: courses-prod-network

volumes:
  mysql-qa-data:
    name: courses-qa-db
  mysql-prod-data:
    name: courses-prod-db
  backend-qa-uploads:
    name: courses-qa-uploads
  backend-prod-uploads:
    name: courses-prod-uploads