# Azure DevOps Pipeline para Posts App (Self-Hosted Agent Windows)
# Trigger: activar en cambios en main
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - front/*
      - back/*
      - azure-pipelines.yml

# Pool: usar el agente self-hosted que ya est√° configurado
pool:
  name: 'MypoolLocal'
  demands:
    - Agent.Name -equals ARNON

# Variables globales
variables:
  buildConfiguration: 'Release'
  frontendPath: 'front'
  backendPath: 'back'
  nodeVersion: '18.x'
  nodePath: 'C:\Program Files\nodejs'

# Stages del pipeline
stages:
  # ========================
  # STAGE 1: CI (Build)
  # ========================
  - stage: CI
    displayName: 'Continuous Integration'
    jobs:
      # Job: Build Frontend
      - job: BuildFrontend
        displayName: 'Build Frontend (Next.js)'
        steps:
          - checkout: self
            fetchDepth: 1
            
          - task: PowerShell@2
            displayName: 'Debug: List Directory Contents'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "=== Current Directory Structure ==="
                Write-Host "Build.SourcesDirectory: $(Build.SourcesDirectory)"
                Get-ChildItem "$(Build.SourcesDirectory)" -Force | Format-Table Name, Mode, LastWriteTime -AutoSize
                Write-Host "=== Checking for front and back folders ==="
                if (Test-Path "$(Build.SourcesDirectory)\front") { Write-Host "‚úÖ front folder exists" } else { Write-Host "‚ùå front folder missing" }
                if (Test-Path "$(Build.SourcesDirectory)\back") { Write-Host "‚úÖ back folder exists" } else { Write-Host "‚ùå back folder missing" }
            
          - task: PowerShell@2
            displayName: 'Verify Node.js Installation'
            inputs:
              targetType: 'inline'
              script: |
                & "$(nodePath)\node.exe" --version
                & "$(nodePath)\npm.cmd" --version
              
          - task: PowerShell@2
            displayName: 'Install Frontend Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                cd "$(Build.SourcesDirectory)\$(frontendPath)"
                & "$(nodePath)\npm.cmd" install
            
          - task: PowerShell@2
            displayName: 'Build Frontend'
            inputs:
              targetType: 'inline'
              script: |
                cd "$(Build.SourcesDirectory)\$(frontendPath)"
                & "$(nodePath)\npm.cmd" run build
            
          - task: PowerShell@2
            displayName: 'Lint Frontend'
            inputs:
              targetType: 'inline'
              script: |
                cd "$(Build.SourcesDirectory)\$(frontendPath)"
                & "$(nodePath)\npm.cmd" run lint
            continueOnError: true
            
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Frontend Artifacts'
            inputs:
              PathtoPublish: '$(frontendPath)/.next'
              ArtifactName: 'frontend-build'
              publishLocation: 'Container'

      # Job: Build Backend
      - job: BuildBackend
        displayName: 'Build Backend (Express + TypeScript)'
        steps:
          - checkout: self
            fetchDepth: 1
            
          - task: PowerShell@2
            displayName: 'Verify Node.js Installation'
            inputs:
              targetType: 'inline'
              script: |
                & "$(nodePath)\node.exe" --version
                & "$(nodePath)\npm.cmd" --version
              
          - task: PowerShell@2
            displayName: 'Install Backend Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                cd "$(Build.SourcesDirectory)\$(backendPath)"
                & "$(nodePath)\npm.cmd" install
            
          - task: PowerShell@2
            displayName: 'Build Backend (TypeScript)'
            inputs:
              targetType: 'inline'
              script: |
                cd "$(Build.SourcesDirectory)\$(backendPath)"
                & "$(nodePath)\npm.cmd" run build
            
          - script: |
              cd $(backendPath)
              echo "Skipping lint for backend (no lint script configured)"
            displayName: 'Lint Backend'
            continueOnError: true
            
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Backend Artifacts'
            inputs:
              PathtoPublish: '$(backendPath)/dist'
              ArtifactName: 'backend-build'
              publishLocation: 'Container'

  # ========================
  # STAGE 2: Database Setup
  # ========================
  - stage: DatabaseSetup
    displayName: 'Database Configuration'
    dependsOn: CI
    condition: succeeded()
    jobs:
      - job: CheckDatabase
        displayName: 'Verify Database Connection'
        steps:
          - task: PowerShell@2
            displayName: 'Setup MySQL Database'
            inputs:
              targetType: 'inline'
              script: |
                cd "$(Build.SourcesDirectory)\$(backendPath)"
                & "$(nodePath)\npm.cmd" run setup-db
            
          - script: |
              echo "=== Database Configuration Check ==="
              echo "Database Host: localhost"
              echo "Database Name: posts_app"
              echo "Database User: root"
              echo "MySQL Server: 8.4 (Local Windows Installation)"
              echo "‚úÖ Database setup completed successfully"
            displayName: 'Database Connection Verification'

  # ========================
  # STAGE 3: Health Check
  # ========================
  - stage: HealthCheck
    displayName: 'Application Health Verification'
    dependsOn: DatabaseSetup
    condition: succeeded()
    jobs:
      - job: ApplicationHealth
        displayName: 'Verify Application Health'
        steps:
          - script: |
              echo "=== Application Health Check ==="
              echo "‚úÖ Frontend build completed successfully"
              echo "‚úÖ Backend build completed successfully"
              echo "‚úÖ Database configuration verified"
              echo "üì¶ Artifacts published and ready for deployment"
              echo ""
              echo "=== Next Steps ==="
              echo "1. Configure self-hosted agent with proper permissions"
              echo "2. Update pipeline to use SelfHosted pool"
              echo "3. Deploy to local environment with MySQL access"
            displayName: 'Health Status Summary'